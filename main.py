import os
import telebot
from telebot import types
from dotenv import load_dotenv
from collections import defaultdict
import requests  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ .env
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS').split(',')))
API_URL = os.getenv('API_URL')  # URL –≤–∞—à–µ–≥–æ API –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_tickets = defaultdict(list)  # {user_id: [{"username": str, "message_id": int, "chat_id": int}]}
active_tickets = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ (user_id)
user_data_cache = {}  # –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {user_id: username}
pending_messages = defaultdict(list)  # {user_id: [message1, message2, ...]}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    if message.from_user.id in ADMIN_IDS:
        bot.send_message(message.chat.id,
                         "–í—ã –∞–¥–º–∏–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reply –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ /extend –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.")
    else:
        bot.reply_to(message,
                     "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ SvoiVPN. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏–º –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /extend –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
@bot.message_handler(commands=['extend'], func=lambda message: message.from_user.id in ADMIN_IDS)
def handle_extend_command(message):
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏: /extend TG_ID PLAN DAYS
        parts = message.text.split()
        if len(parts) != 4:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /extend TG_ID PLAN DAYS\n–ü—Ä–∏–º–µ—Ä: /extend 123456789 base 30")
            return

        tg_id = parts[1]  # –ù–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
        plan = parts[2]
        days = int(parts[3])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ tg_id —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
        if not tg_id.isdigit():
            raise ValueError("Telegram ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")


        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        response = requests.patch(
            f"{API_URL}/{tg_id}/extend",
            json={"days": days, "plan": plan}
        )

        if response.status_code == 200:
            bot.reply_to(message,
                         f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {tg_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞.\n–ü–ª–∞–Ω: {plan}\n–î–Ω–µ–π: {days}")
        else:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {response.text}")

    except ValueError as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['info'], func=lambda message: message.from_user.id in ADMIN_IDS)
def handle_extend_command(message):
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏: /extend TG_ID PLAN DAYS
        parts = message.text.split()
        if len(parts) != 2:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /info TG_ID\n–ü—Ä–∏–º–µ—Ä: /info 123456789")
            return

        tg_id = parts[1]  # –ù–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ tg_id —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
        if not tg_id.isdigit():
            raise ValueError("Telegram ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")


        response = requests.get(
            f"{API_URL}/{tg_id}/info"
        )

        if response.status_code == 200:
            bot.reply_to(message,
                         f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {tg_id}\n"
                         f"{response.json()}")
        else:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {response.text}")

    except ValueError as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['disable_device_limit'], func=lambda message: message.from_user.id in ADMIN_IDS)
def handle_extend_command(message):
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏: /extend TG_ID PLAN DAYS
        parts = message.text.split()
        if len(parts) != 2:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /disable_device_limit TG_ID\n–ü—Ä–∏–º–µ—Ä: /disable_device_limit 123456789")
            return

        tg_id = parts[1]  # –ù–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ tg_id —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
        if not tg_id.isdigit():
            raise ValueError("Telegram ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")


        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        response = requests.get(
            f"{API_URL}/{tg_id}/disable_device"
        )

        if response.status_code == 200:
            bot.reply_to(message,
                         f"‚úÖ –õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")
        else:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {response.text}")

    except ValueError as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@bot.message_handler(func=lambda message: message.from_user.id not in ADMIN_IDS,
                     content_types=['text', 'photo', 'document', 'audio', 'video', 'voice', 'sticker'])
def handle_user_message(message):
    user_id = message.from_user.id
    username = message.from_user.username or f"id{user_id}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –≤ –∫—ç—à
    user_data_cache[user_id] = username

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
    msg_info = {
        "username": username,
        "message_id": message.message_id,
        "chat_id": message.chat.id,
        "content_type": message.content_type,
        "content": message  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    }
    user_tickets[user_id].append(msg_info)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ
    bot.reply_to(message, "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

    # –ï—Å–ª–∏ —Ç–∏–∫–µ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω (–∞–¥–º–∏–Ω —É–∂–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –µ–≥–æ)
    if user_id in active_tickets:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMIN_IDS:
            try:
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.forward_message(admin_id, msg_info['chat_id'], msg_info['message_id'])

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton(
                    text="–û—Ç–≤–µ—Ç–∏—Ç—å",
                    callback_data=f"view_ticket_{user_id}"
                ))

                bot.send_message(
                    admin_id,
                    f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ –æ—Ç @{username} (ID: <code>{user_id}</code>)",
                    reply_markup=markup,
                    parse_mode="HTML"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ
        active_tickets.add(user_id)
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ
        for admin_id in ADMIN_IDS:
            try:
                bot.send_message(
                    admin_id,
                    f"üì© –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç –æ—Ç @{username} (ID: <code>{user_id}</code>)",
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton(
                            text="–û—Ç–≤–µ—Ç–∏—Ç—å",
                            callback_data=f"view_ticket_{user_id}"
                        )
                    ),
                    parse_mode="HTML"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reply –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
@bot.message_handler(commands=['reply'], func=lambda message: message.from_user.id in ADMIN_IDS)
def show_active_tickets(message):
    if not active_tickets:
        bot.reply_to(message, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
        return

    markup = types.InlineKeyboardMarkup()
    for user_id in active_tickets:
        username = user_data_cache.get(user_id, f"id{user_id}")
        markup.add(types.InlineKeyboardButton(
            text=f"@{username} (ID: <code>{user_id}</code>)",
            callback_data=f"view_ticket_{user_id}",
        ))

    bot.send_message(message.chat.id, "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã:", reply_markup=markup)

@bot.message_handler(commands=['help'], func=lambda message: message.from_user.id in ADMIN_IDS)
def handle_help(message):
    help_text = """
<b>üõ† –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>

1. <b>/reply</b> - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã
2. <b>/extend TG_ID PLAN DAYS</b> - –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
   <i>–ü—Ä–∏–º–µ—Ä:</i> <code>/extend 123456789 base 30</code>

3. <b>/info TG_ID</b> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   <i>–ü—Ä–∏–º–µ—Ä:</i> <code>/info 123456789</code>

4. <b>/disable_device_limit TG_ID</b> - –û—Ç–∫–ª—é—á–∏—Ç—å –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤
   <i>–ü—Ä–∏–º–µ—Ä:</i> <code>/disable_device_limit 123456789</code>

5. <b>/help</b> - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>üîß –†–∞–±–æ—Ç–∞ —Å —Ç–∏–∫–µ—Ç–∞–º–∏:</b>
- –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∏–∫–µ—Ç–æ–º, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ç–∞
"""

    bot.send_message(
        chat_id=message.chat.id,
        text=help_text,
        parse_mode="HTML"
    )

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data.startswith('view_ticket_'):
        user_id = int(call.data.split('_')[-1])
        show_user_messages(call.message.chat.id, user_id)
    elif call.data.startswith('close_ticket_'):
        user_id = int(call.data.split('_')[-1])
        close_ticket(call.message.chat.id, user_id)


def show_user_messages(admin_chat_id, user_id):
    if user_id not in user_tickets:
        bot.send_message(admin_chat_id, "–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    username = user_data_cache.get(user_id, f"id{user_id}")

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for msg_info in user_tickets[user_id]:
        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.forward_message(admin_chat_id, msg_info['chat_id'], msg_info['message_id'])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(
        text="–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç",
        callback_data=f"close_ticket_{user_id}"
    ))

    bot.send_message(
        admin_chat_id,
        f"–í—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ —Ç–∏–∫–µ—Ç @{username} (ID: <code>{user_id}</code>). –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
        reply_markup=markup,
        parse_mode='HTML'
    )


def close_ticket(admin_chat_id, user_id):
    if user_id in active_tickets:
        active_tickets.remove(user_id)
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞
        if user_id in user_tickets:
            del user_tickets[user_id]
        bot.send_message(admin_chat_id, "–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç.")
    else:
        bot.send_message(admin_chat_id, "–¢–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–æ–≤
@bot.message_handler(func=lambda message: message.reply_to_message is not None and
                                          message.from_user.id in ADMIN_IDS,
                     content_types=['text', 'photo', 'document', 'audio', 'video', 'voice', 'sticker'])
def handle_admin_reply(message):
    reply_text = message.reply_to_message.text
    if not reply_text or "–í—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ —Ç–∏–∫–µ—Ç @" not in reply_text:
        return

    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        user_id = int(reply_text.split("(ID: ")[1].split(")")[0])
    except (IndexError, ValueError):
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ –∫—ç—à–∞
    username = user_data_cache.get(user_id, f"id{user_id}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        if message.content_type == 'text':
            bot.send_message(user_id, f"‚úâÔ∏è –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{message.text}")
        elif message.content_type == 'photo':
            bot.send_photo(user_id, message.photo[-1].file_id, caption=f"‚úâÔ∏è –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{message.caption or ''}")
        elif message.content_type == 'document':
            bot.send_document(user_id, message.document.file_id,
                              caption=f"‚úâÔ∏è –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{message.caption or ''}")
        elif message.content_type == 'audio':
            bot.send_audio(user_id, message.audio.file_id, caption=f"‚úâÔ∏è –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{message.caption or ''}")
        elif message.content_type == 'video':
            bot.send_video(user_id, message.video.file_id, caption=f"‚úâÔ∏è –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{message.caption or ''}")
        elif message.content_type == 'voice':
            bot.send_voice(user_id, message.voice.file_id, caption=f"‚úâÔ∏è –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
        elif message.content_type == 'sticker':
            bot.send_sticker(user_id, message.sticker.file_id)
            bot.send_message(user_id, "‚úâÔ∏è –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (—Å—Ç–∏–∫–µ—Ä)")

        bot.reply_to(message, f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}.")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    bot.infinity_polling()